"use strict";

function calc() {
	const map = input.split("\n").map(line => line.split(""))

	const part1 = getMinSteps(map);
	const part2 = getMinSteps2(map);

	return `${part1} ${part2}`;
}

function getMinSteps(map) {
	const entrance = getCoord(map, '@');
	const root = createGraph(map, entrance);
	return getOptimalPath(root);
}

function getMinSteps2(map) {
	const entrance = getCoord(map, '@');
	map[entrance.y][entrance.x] = '#';
	map[entrance.y - 1][entrance.x] = '#';
	map[entrance.y + 1][entrance.x] = '#';
	map[entrance.y][entrance.x - 1] = '#';
	map[entrance.y][entrance.x + 1] = '#';

	const newEntrances = [
		{x: entrance.x - 1, y: entrance.y - 1},
		{x: entrance.x + 1, y: entrance.y - 1},
		{x: entrance.x - 1, y: entrance.y + 1},
		{x: entrance.x + 1, y: entrance.y + 1}
	];

	const roots = newEntrances.map(e => {
		map[e.y][e.x] = '@';
		return createGraph(map, e);
	});

	const allKeys = roots.reduce((a, r) => {
			a.push(...r.allKeys);
			return a;
		}, []
	);

	return roots.reduce((a, r) => a + getOptimalPath(r, allKeys.filter(k => r.allKeys.indexOf(k) < 0)), 0);
}

function getOptimalPath(root, givenKeys) {
	let result = Infinity;

	let keys = {};
	(givenKeys || []).forEach(k => keys[k] = true);

	let history = {};

	const move0 = {node: root, steps: 0, keys: keys};
	addToHistory([move0], history);

	for (let queue = [move0]; queue.length > 0;) {
		const move = queue.shift();

		if (move.node.name >= 'a' && move.node.name <= 'z') {
			move.keys[move.node.name] = true;
		}

		if (Object.keys(move.keys).filter(k => root.allKeys.indexOf(k) >= 0).length == root.allKeys.length) {
			result = Math.min(result, move.steps);

		} else {
			let moves = getPossibleMovesFrom(move);
			moves = filterClosedDoors(moves);
			moves = filterSeenInHistory(moves, history);

			addToHistory(moves, history);

			queue.push(...moves);
		}
	}

	return result;	
}

function getPossibleMovesFrom(move) {
	return move.node.link.map(link => ({node: link.node, steps: move.steps + link.dist, keys: {...move.keys}}));
}

function filterClosedDoors(moves) {
	return moves.filter(m => m.node.name < 'A' || m.node.name > 'Z' || m.keys[m.node.name.toLowerCase()]);
}

function filterSeenInHistory(moves, history) {
	return moves.filter(m => !history[getHistoryKey(m)] || m.steps < history[getHistoryKey(m)]);
}

function getHistoryKey(move) {
	return move.node.name + ":" + Object.keys(move.keys).sort().join("");
}

function addToHistory(moves, history) {
	moves.forEach(m => history[getHistoryKey(m)] = m.steps);
}

function createGraph(map, root) {
	root.name = '@';
	root.link = [];

	const seenNodes = {};
	seenNodes[root.name] = root;

	for (let queue = [root.name]; queue.length > 0;) {
		const current = seenNodes[queue.shift()];

		const nodesFromCurrent = getNodesFrom(map, current);
		const notSeenNodes = nodesFromCurrent.filter(n => !seenNodes[n.name]);
		notSeenNodes.forEach(n => seenNodes[n.name] = {x: n.x, y: n.y, name: n.name, link: []});

		nodesFromCurrent.forEach(n => current.link.push({dist: n.dist, node: seenNodes[n.name]}));

		queue.push(...notSeenNodes.map(n => n.name));
	}

	root.allKeys = Object.keys(seenNodes).filter(k => k >= 'a' && k <= 'z');

	return root;	
}

function getCoord(map, symbol) {
	const indexes = map.map(row => row.indexOf(symbol));
	const y = indexes.findIndex(i => i >= 0);

	if (y < 0) {
		throw new Error(`${symbol} not found`);
	}

	return {x: indexes[y], y: y};
}

function getNodesFrom(map, startCoord) {
	const nodes = [];

	map = [...map].map(r => [...r]);

	let front = [[startCoord.x, startCoord.y, 0]];
	map[startCoord.y][startCoord.x] = '.';

	while (front.length > 0) {
		let [x, y, dist] = front.shift();

		if (map[y][x] == '.') {
			++dist;
			front.push([x - 1, y, dist]);
			front.push([x + 1, y, dist]);
			front.push([x, y - 1, dist]);
			front.push([x, y + 1, dist]);
			map[y][x] = '#';
		} else if ((map[y][x] >= 'a' && map[y][x] <= 'z') || (map[y][x] >= 'A' && map[y][x] <= 'Z') || (map[y][x] == '@')) {
			nodes.push({x: x, y: y, dist: dist, name: map[y][x]});
			map[y][x] = "#";
		}

	}

	return nodes;
}

const input = `#################################################################################
#.............#...#...O.#.#...........#.#...#.........#.......#.....#.......#.Z.#
#####.#######.#H#.#.###.#.#.#####.###.#.#.###.#####.#.#.#####.#.###.#.###.###.#.#
#.....#.#...#.#.#...#.#.#.#.#.#...#.....#.#...#...#.#.#...#w..#...#...#.#.....#.#
#.#####.#.#.#.#.#####.#.#.#B#.#.#########.#.###.#.#.#####.#.#####.#####.#######.#
#.#...#...#.....#...#.#.#.....#.........#.#.#...#.#.....#.#...#..y..#...#.....#.#
#.#.#.#.#########.#.#.#.###########.###.#.#.#.#######.###.###.#####.#.#.#.###.#.#
#.#.#...#.........#.#.......#.....#...#.#.#.#.#.....#.....#.#.#...#...#.#.#...#.#
#.###.###.#########.#######.#.###.#####.#.#.#.#.###.#######.#.#.#.#####.#.#.###.#
#...#.#.....#x....#.#..f..#...#...#...#.#.#.#.....#.....#i..#...#.#...#.#.#.#...#
#.#.#.#.#####.###.#.#A###.#####.###.#.#.#.#.#########.#.#.#.#####.#.#.###.#.#.#.#
#.#.#.#.#...#.#.#.#...#.#.#...#.#.T.#...#.#...#.....#.#...#.#.#..e#.#.....#.#.#.#
###.###.#X#.#.#.#.#.###.#.###.#.###.###.#.###.#.###.#.#####.#.#.###.#######.#.#.#
#...#d..#.#...#.#.#.....#...#.#...#...#.#...#.#.#.....#.......#.#.....#.#...#.#.#
#.###.###.#####R#.#####.###.#.###.###.#.#.#.#.#.###########.###.#.###.#.#.#####.#
#...#.#.#...#.......#...#...#...#.....#.#.#...#.....#.....#.#...#...#.#...#...#.#
###E#.#.###.#######.#####.###.#.#######.#.#####.###N#.###.###.###.###.#.###.#.#.#
#.#...#...#..c..#...#r..F.#...#.....#.#.#...#.#.#.#.#...#.#...#...#...#.....#.#.#
#.#####.#######.###.#.#######.#####.#.#.###.#.#.#.#.###.#.#.###.###.#########.#.#
#z....#.......#...#...#.....#s#.......#.#.#.#.....#...#.#...#v..#.#...#.....#...#
#.#.###.#.#######.#####G###.#.#######.#.#.#.#####.#.###.#######.#.###.#.#######.#
#.#.#...#.......#...#...#.#.#...#...#.#.#.#.....#.#...#.D.....#.....#.#.......#.#
###.#.#########.###C#####.#.#.#.#.#.###.#.#####.#####.###############.#.#####.#.#
#...#...#.....#...#....g....#.#.#.#.....#.....#.....#...........#.....#.....#...#
#.#####.#.###.#.#############.#.#.#######.#########.#.#######.#.#.#########.#####
#.....#...#...#.#.........#...#.#.#.....#.........#.#.#.....#.#...#.......#.#..u#
#Q#.#######.###.#.#.#.#####.###.#.#####.#.#######.#.###.###.#.#####.###.#.#.#.###
#.#.......#.#...#.#.#.#...#.#.#...#...#.#.#.....#.#.#...#.#.#...#.....#.#.#.#...#
#.#####.###.#.###.#.###.#.#.#.#####.#.#.#.#.###.#.#.#.###.#.#.#.#######.#.#.#.#.#
#...#...#...#.....#.....#...#.......#...#.#.#.#.K.#...#.#...#.#.#.......#.#.#.#.#
###.#.###.#####################.###.#####.#.#.#.#######.#.#####.#.#####.###.#.#.#
#...#.....#...#.....#.........#...#.#...#.#.#...#.......#...#...#...#...#...#.#.#
#.#########.###.###.#.###.###.###.#.#.#.###.#####.#.###.###.#.###.#.#.###.#####.#
#.#.....#.........#...#...#.#.#.#.#.#.#.#...#.....#.#l..#.#.#...#.#.#...#...#...#
#.###.#.###.###########.###.#.#.#.#.#.#.#.###.#####.#.###.#.###.#.#.#.#####.#.#.#
#.#...#...#...#...#.....#...#.#...#...#.#...#.#.#...#.....#.....#.#.#.#...#.#.#.#
#.#.#####.#.###.#.#.#####.###.#########.#.#.#.#.#.#################.###.#.#P#.#.#
#.#.#.....#.#...#.#...#.#...#.#.....#...#.#.#.#.#.#.................#...#...#.#.#
#.#.#.#######.###.###.#.#.#.#.#.###.#.#.#.#.#.#.#.#.#########.#######.#######.#.#
#.U.#p........#....j..#...#.....#.....#...#.....#...........#...........J.....#.#
#######################################.@.#######################################
#...#.....#...#.......#.........#.........#.....#.....#.....#.....#.............#
#.#.#.###.###.#.#L###.#.#####.###.#.###.#.#.#.###.#.###.#.#.#.#.#.#.#########.#.#
#.#...#.....#...#...#.#.#...#.....#...#.#...#.....#.....#.#.#.#.#.#.#.......#q#.#
#.#.#######.#.#####.#.###.#.#########.#.#.###############.###.#.#.###.#####.###.#
#.#.#.....#.#...#...#.....#.#.........#.#.#.....#.....#...#...#.#.....#...#...#.#
#.#.#.###.#.#####.#########.#.#########.#.#.#.#.#.###.#.###.###.#.#####.#.###.#.#
#.#.#...#.#.....#.....#...#...#.......#.#.#.#.#...#...#.#.....#.#.#...#.#...#...#
#.#####.#.#####.#####.#.#######.###.###.#.#.#.#####.###.#.#####.#.#.#.#.###.###.#
#.....#.#...#...#...#.#...........#...#.#k#.#...#.....#.#.#.....#.#.#.#...#...#.#
#####.#.###.###.#.#.#.#.#############.#.#.#.###.#.#####.#.#.#######.#.###.#.###.#
#.....#...#...#...#...#.#...........#...#.#...#.#...#...#.#...#...#.#...#.#.....#
#.#######.###.#####.#####.#########.#.###.#####.###.#.###.###.#.#.#.###.#.#######
#.......#...#.....#.#.....#.......#.#...#.......#.#.#.#...#.#...#.....#.#.#.....#
#.###.#####.#####.###.#####.#.#.###.#############.#.#.#.###.###########.#.#.###.#
#...#.#.........#...#.#.....#.#.#...#...#...#.....#.#...#...#.......#...#.#.#m..#
#.###.#.###########.#.#######.###.###.#.#.#.#.#.###.#####.#.#######.#.###.#.#.#.#
#.#...#...#.#.......#...#...#.W...#...#.#.#.#.#.....#.....#...#.....#...#.#.#.#.#
###.#.###.#.#.#########.#.#.#####.###.#.#.###.#######.#######.#.###.###.#.###.#.#
#...#...#...#...#.....#...#.....#...#.#.#.#...#.........#.......#.#.#...#.....#.#
#.#########.###.#.#.###########.###.#.#.#.#.###.#######.#.#######.#.#.#########.#
#.........#.#...#.#.#....a......#.#...#.#.#...#.#.......#.#...#.....#.#...#.....#
#.#######.#.#.###.#.#############.#####.#.###.#.#.#######.#.###.#####.###.#.#####
#.#.....#...#.#...#.....#...#.......#h..#.....#.#.#.......#.#...#...#...#.#.#...#
#.###.#.#####.#.#####.#.#.#.#.#####.#.###.#######.#######.#.#####.#.###.#.#.#.#.#
#...#.#...#...#.#...#.#.#.#..o#...#...#.#.......#.......#.#.....#.#.#...#.....#.#
###.#####.#.#.#.###.#.###.#######.#####.#######.#.#####.#######.#.#.#.###########
#.#...#...#.#.#.....#.....#.#.......#...#...#...#.....#.......#.#.#.#...#.......#
#.###.#.###.#.#####.#######.#.#I###.###.#.#.#.###########.###.#.#.#.###.#.#####.#
#...#...#...#.....#.#.#.....#.#...#t..#.#.#...#.........#.#.#.#...#...#...#.....#
#.#####.#.#########.#.#.###.#.###.###.#.#.#####.#######.#.#.#.#######.#####.#####
#...M...#.......#...#...#.#...#.#...#...#.......#.....#.#.#.........#.....#.#...#
#.#############.#.###.###.#####.###.#############.#####.#.#.#######.#####.#.###.#
#.#.....Y...#.#.#.#.#.#..b..#...#.#.#...#...#.........#.#.#.#...#.#.#...#...#...#
#.#.#######.#.#.#.#.#.###.#.#.#.#.#.#.#.#.#.#.#######.#.#.###.#.#.#.#.#.#####.#.#
#...#n....#.#.#...#.......#...#...#...#.#.#.#.#.....#...#.....#.#...#.#.......#.#
#####.###.#.#.###################.#####.#.###.#.###.#####V#####.#.###.###.#####.#
#.....#...#...#.....#...#...#.....#.....#.....#...#...........#.#...#.#...#.....#
#.###########.###.#.#.#.#.#.#######.###.#.#####################.###.###.###.#####
#.................#...#...#.........#.S.#.......................#.......#.......#
#################################################################################`;
